<?xml version="1.0" encoding="UTF-8"?>

<!--  https://docs.spring.io/spring-framework/docs/ 를 통해 xml 설정파일 찾기 (가져온 버전 5.2.x)  -->
<!-- 
xmlns:mvc="http://www.springframework.org/schema/mvc"
http://www.springframework.org/schema/mvc	==> mvc와 관련된 태그를 사용하기 위한 스키마 설정
https://www.springframework.org/schema/mvc/spring-mvc.xsd
위의 주소들을 추가함으로서 mvc빈을 사용할 수 있게 되었다.
 -->
<!-- 
Dispatche-servlet의 내용을 servlet, service, security로 나누어 spring 폴더에 넣었기에
.xml을 .backup으로 바꾸어 xml로써 기능을 하지 못하게 함과 동시에 혹시모를 오류에 대비해 내용을 남긴다.
 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/mvc
        https://www.springframework.org/schema/mvc/spring-mvc.xsd">

<!-- 객체를 담아 빈으로 등록한다. 하지만 지금은 객체가 아닌 url을 직접 입력하여 사용한다. -->
<!-- MVC 컨테이너에 담긴다. --> 
    <bean id="/index" class="webmavenprac.web.controller.IndexController"></bean>
    <bean id="/notice/list" class="webmavenprac.web.controller.notice.ListController">
    	<!-- name의 noticeService는 ListController가 가지고 있는 setter를 의미하고
    		 ref의 noticeService는 밑의 bean id="noticeService"를 뜻한다. -->
    	<!-- dipatcher-servlet을 읽으면서 bean의 noticeService 객체가 만들어지고  
    		 ListController의 noticeService의 setter로 들어가 역할을 해준다.-->
    	<property name="noticeService" ref="noticeService"></property>
    </bean>
    <bean id="/notice/detail" class="webmavenprac.web.controller.notice.DetailController"></bean>

	<!-- Tiles를 사용하기 위한 bean 등록 -->
	<bean
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<property name="viewClass"
			value="org.springframework.web.servlet.view.tiles3.TilesView" />
		<!-- 
		밑의 order로  InternalResourceViewResolver 와 충돌하는 것을 막는다. tiles로 처리하지 못하면 
		밑의 resolver가 찾아준다.
		-->	
		<property name="order" value="1" />
	</bean>
	<bean
		class="org.springframework.web.servlet.view.tiles3.TilesConfigurer">
		<property name="definitions" value="/WEB-INF/tiles.xml" />
	</bean>
	<!-- Tiles를 사용하기 위한 bean 등록 END -->
    
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    	<property name="prefix" value="/WEB-INF/view/"></property>
    	<property name="suffix" value=".jsp"></property>
    	<property name="order" value="2"/>
    </bean>
    
	<mvc:resources location="/static/" mapping="/**"></mvc:resources>
	
	<!-- IoC Container에 닮겨 Controller와 함께 인식된다. -->
	<!-- NoticeService를 Interface화 하면서 이에 해당하는 Bean을 넣어주기위해 
		 webmavenprac.web.sevice.NoticeService 에서 
		 webmavenprac.web.sevice.jdbc.JDBCNoticeService 로 바꿔 준다.
		 (패키지 명 꼭 확인하기. jdbc면 jdbc 패키지, jpa면 jpa패키지 등 확인 할 것)  
		 앞으로도 해당 Interface를 이용해 JPA든 MyBatis든 바꾸자 하는 Service로 여기서 바꿔주면 된다.-->
	<bean id="noticeService" class="webmavenprac.web.sevice.jdbc.JDBCNoticeService" >
		<!-- Connection에 해당하는 정보들을 DataSource로 바꿔주기 위해 사용하는 property -->
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 
			DataSource를 사용하여 Connection을 주어야 하기에 Bean등록을 한다. (property의 reference를 위해) 
			My SQL 설정을 위해 pom.xml에 jdbc dependency가 추가 되있는지 꼭 확인한다.
																							-->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<!-- property를 적을 땐 DataSource가 가지는 필드 네임과 똑같이 적어야 함으로 스펠링 주의 -->
		<property name ="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name ="url" value="jdbc:mysql://localhost:3306/springmav_newlac" />
		<property name ="username" value="practiceAccount" />
		<property name ="password" value="1234" />
	</bean>
	
</beans>






